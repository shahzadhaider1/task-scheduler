// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Task-Scheduler-Service APIs",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/internal/tasks": {
      "put": {
        "description": "update task",
        "tags": [
          "service"
        ],
        "operationId": "updateTask",
        "parameters": [
          {
            "description": "task model",
            "name": "task",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "create task",
        "tags": [
          "service"
        ],
        "operationId": "addTask",
        "parameters": [
          {
            "description": "task model",
            "name": "task",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "task added",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "bad request"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/internal/tasks/{ID}": {
      "get": {
        "description": "retrieve task based on id",
        "tags": [
          "service"
        ],
        "operationId": "getTaskByID",
        "parameters": [
          {
            "type": "string",
            "description": "id of task",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "task retrieved",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "404": {
            "description": "task not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "description": "delete task based on id",
        "tags": [
          "service"
        ],
        "operationId": "deleteTask",
        "parameters": [
          {
            "type": "string",
            "description": "id of task",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "task deleted"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "task not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Task": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "data": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Task-Scheduler-Service APIs",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/internal/tasks": {
      "put": {
        "description": "update task",
        "tags": [
          "service"
        ],
        "operationId": "updateTask",
        "parameters": [
          {
            "description": "task model",
            "name": "task",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "post": {
        "description": "create task",
        "tags": [
          "service"
        ],
        "operationId": "addTask",
        "parameters": [
          {
            "description": "task model",
            "name": "task",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "task added",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "bad request"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/internal/tasks/{ID}": {
      "get": {
        "description": "retrieve task based on id",
        "tags": [
          "service"
        ],
        "operationId": "getTaskByID",
        "parameters": [
          {
            "type": "string",
            "description": "id of task",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "task retrieved",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "404": {
            "description": "task not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      },
      "delete": {
        "description": "delete task based on id",
        "tags": [
          "service"
        ],
        "operationId": "deleteTask",
        "parameters": [
          {
            "type": "string",
            "description": "id of task",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "task deleted"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "task not found"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Task": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "data": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    }
  }
}`))
}
